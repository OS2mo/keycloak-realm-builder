# SPDX-FileCopyrightText: 2019-2020 Magenta ApS
# SPDX-License-Identifier: MPL-2.0

################################################################################
# Changes to this file requires approval from Labs. Please add a person from   #
# Labs as required approval to your MR if you have any changes.                #
################################################################################

# For `docker push` to work, the following envionment variables have to set in
# the Gitlab UI.
# RELEASE_REGISTRY_USER
# RELEASE_REGISTRY_PASSWORD

stages:
  - lint
  # build stage is not blocked by lint stage, as we have a DAG:
  # https://docs.gitlab.com/ee/ci/directed_acyclic_graph/index.html
  - build
  # - test
  - release

variables:
  # Project variables
  RELEASE_REGISTRY: docker.io
  RELEASE_REGISTRY_IMAGE: index.docker.io/magentaaps/os2mo-keycloak-realm-builder

  IMAGE_SHA: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}

  IMAGE_DEV: ${RELEASE_REGISTRY_IMAGE}:dev
  IMAGE_RC: ${RELEASE_REGISTRY_IMAGE}:rc
  IMAGE_VERSION: ${RELEASE_REGISTRY_IMAGE}:${CI_COMMIT_TAG}
  IMAGE_LATEST: ${RELEASE_REGISTRY_IMAGE}:latest


# Only run pipeline when pushing a tag or a branch.
# This is a workaround for a bug causing detached pipelines on MRs
# See: https://gitlab.com/gitlab-org/gitlab/-/issues/34756
#      https://docs.gitlab.com/ee/ci/yaml/#workflowrules-templates
workflow:
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH


# Lint stage
#############

.lint-default: &lint-default
  stage: lint
  needs: []
  image: python:3.8
  services: []
  tags:
    - docker


Lint Dockerfiles:
  <<: *lint-default
  image: hadolint/hadolint:latest-debian
  before_script:
    - apt-get -y update
    - apt-get -y install --no-install-recommends git
  script:
    - git ls-files --exclude='Dockerfile*' --ignored | xargs --max-lines=1 hadolint


Lint shell scripts:
  <<: *lint-default
  image: koalaman/shellcheck-alpine:latest
  before_script:
    - apk update
    - apk add git
  script:
    - git ls-files --exclude='*.sh' --ignored | xargs shellcheck


# Build stage
#############

Build RealmBuilder:
  stage: build
  needs: []
  image:
    # We use kaniko v0.16.0 as both v0.17.0, v0.17.1, v0.18.0 and v0.19.0 contains fatal bugs.
    name: gcr.io/kaniko-project/executor:v1.5.2-debug
    entrypoint: [""]
  tags:
    - docker
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/Dockerfile
      --destination=${IMAGE_SHA}


# Release stage
###############

.release-default: &release-default
  stage: release
  needs: ["Build RealmBuilder"]
  image: alpine
  variables:
    GIT_STRATEGY: none # We do not need the source code
  tags:
    - docker
  before_script:
    - apk add skopeo

Release master:
  <<: *release-default
  rules:
    - if: $CI_COMMIT_REF_NAME == "master"
  script:
    - skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
      "docker://${IMAGE_SHA}"
      "docker://${IMAGE_DEV}"

Release rc:
  <<: *release-default
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /^release\/.+$/
  script:
    - skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
      "docker://${IMAGE_SHA}"
      "docker://${IMAGE_RC}"

Release version:
  <<: *release-default
  rules:
      # Matches <version core> from SemVer 2.0.0 BNF grammar. Ex. 2.3.4, but not 2.3.4-rc
      - if: $CI_COMMIT_TAG =~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/
  script:
    - skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
      "docker://${IMAGE_SHA}"
      "docker://${IMAGE_VERSION}"
    - skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
      "docker://${IMAGE_SHA}"
      "docker://${IMAGE_LATEST}"
